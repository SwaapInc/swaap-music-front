{"ast":null,"code":"import _defineProperty from \"C:\\\\Travail\\\\2-Cours\\\\M2\\\\node\\\\swaap\\\\swaap\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const ADD_TO_PLAYLIST = 'app/playlistManager/ADD_TO_PLAYLIST';\nexport const TOGGLE_ADD_TRACK = 'app/playlistManager/TOGGLE_ADD_TRACK';\nexport const ADD_TRACK = 'app/playlistManager/ADD_TRACK';\nexport const REMOVE_TRACK = 'app/playlistManager/REMOVE_TRACK';\nexport const UPDATE_PLAYLIST_NAME = 'app/playlistManager/UPDATE_PLAYLIST_NAME';\nexport const IMPORT_PLAYLIST = 'app/playlistManager/IMPORT_PLAYLIST';\nexport const CONVERT_PLAYLIST_PROGRESS = 'app/playlistManager/CONVERT_PLAYLIST_PROGRESS';\nexport const RESET_PLAYLIST = 'app/playlistManager/RESET_PLAYLIST';\nexport const GET_SAVED_PLAYLIST = 'app/playlistManager/GET_SAVED_PLAYLIST';\nexport const SAVE_NEW_PLAYLIST = 'app/playlistManager/SAVE_NEW_PLAYLIST';\n\nfunction removeItemFromPlaylist(playlist, action) {\n  const api = action.api,\n        id = action.id;\n\n  switch (api) {\n    case 1:\n      return playlist.filter(tuple => tuple.dataSpotify.id !== id);\n\n    case 2:\n      return playlist.filter(tuple => tuple.dataDeezer.id !== id);\n\n    default:\n      return playlist;\n  }\n}\n\nfunction addNewCorrelation(tuple, trackCorrelation) {\n  const newId = tuple.dataSpotify;\n  const find = trackCorrelation.find(tuple => tuple.dataSpotify === newId);\n  return find !== undefined ? trackCorrelation : [...trackCorrelation, tuple];\n}\n\nexport function getSavedPlaylist(savedPlaylist) {\n  return {\n    type: GET_SAVED_PLAYLIST,\n    savedPlaylist\n  };\n}\nexport const addTrackToPlaylist = input => {\n  return {\n    type: ADD_TO_PLAYLIST,\n    api: input.api,\n    track: input.track,\n    trackCorrelation: input.trackCorrelation\n  };\n};\nexport const addResultToPlaylist = apis => ({\n  type: ADD_TRACK,\n  apis\n});\nexport const removeResultFromPlaylilst = input => ({\n  type: REMOVE_TRACK,\n  id: input.id,\n  api: input.api\n});\nexport const getPlaylist = api => ({\n  type: IMPORT_PLAYLIST,\n  api\n});\nexport const convertPlaylistProgress = playlist => ({\n  type: CONVERT_PLAYLIST_PROGRESS,\n  playlist\n});\nexport const updatePlaylistName = input => ({\n  type: UPDATE_PLAYLIST_NAME,\n  input\n});\nexport function resetPlaylist() {\n  return {\n    type: RESET_PLAYLIST\n  };\n}\nexport function saveNewPlaylist(input) {\n  return {\n    type: SAVE_NEW_PLAYLIST,\n    input\n  };\n}\nexport default function reducer(state = {\n  loadingAddTracks: false,\n  playlists: [],\n  progressBar: 0,\n  playlistId: 0,\n  playlistName: '',\n  playlistImage: '',\n  trackCorrelation: []\n}, action) {\n  switch (action.type) {\n    case ADD_TO_PLAYLIST:\n      return _objectSpread({}, state);\n\n    case ADD_TRACK:\n      const newTrackCorrelation = addNewCorrelation({\n        dataSpotify: action.apis.spotify.id,\n        dataDeezer: action.apis.deezer.id\n      }, state.trackCorrelation);\n      return _objectSpread({}, state, {\n        playlists: [...state.playlists, {\n          dataSpotify: action.apis.spotify,\n          dataDeezer: action.apis.deezer\n        }],\n        trackCorrelation: newTrackCorrelation,\n        loadingAddTrack: false,\n        playlistImage: state.playlistImage === '' ? action.apis.spotify.album.image : state.playlistImage\n      });\n\n    case REMOVE_TRACK:\n      const newPlaylist = removeItemFromPlaylist(state.playlists, action);\n      return _objectSpread({}, state, {\n        playlists: newPlaylist\n      });\n\n    case TOGGLE_ADD_TRACK:\n      return _objectSpread({}, state, {\n        loadingAddTrack: !state.loadingAddTrack\n      });\n\n    case CONVERT_PLAYLIST_PROGRESS:\n      return _objectSpread({}, state, {\n        progressBar: action.playlist.progress,\n        playlists: action.playlist.playlist,\n        playlistId: action.playlist.id,\n        playlistName: action.playlist.playlistName,\n        playlistImage: action.playlist.image\n      });\n\n    case UPDATE_PLAYLIST_NAME:\n      return _objectSpread({}, state, {\n        playlistName: action.input\n      });\n\n    case RESET_PLAYLIST:\n      return _objectSpread({}, state, {\n        playlists: [],\n        progressBar: 0,\n        playlistId: 0,\n        playlistName: '',\n        playlistImage: ''\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Travail/2-Cours/M2/node/swaap/swaap/frontend/src/modules/playlistManager.js"],"names":["ADD_TO_PLAYLIST","TOGGLE_ADD_TRACK","ADD_TRACK","REMOVE_TRACK","UPDATE_PLAYLIST_NAME","IMPORT_PLAYLIST","CONVERT_PLAYLIST_PROGRESS","RESET_PLAYLIST","GET_SAVED_PLAYLIST","SAVE_NEW_PLAYLIST","removeItemFromPlaylist","playlist","action","api","id","filter","tuple","dataSpotify","dataDeezer","addNewCorrelation","trackCorrelation","newId","find","undefined","getSavedPlaylist","savedPlaylist","type","addTrackToPlaylist","input","track","addResultToPlaylist","apis","removeResultFromPlaylilst","getPlaylist","convertPlaylistProgress","updatePlaylistName","resetPlaylist","saveNewPlaylist","reducer","state","loadingAddTracks","playlists","progressBar","playlistId","playlistName","playlistImage","newTrackCorrelation","spotify","deezer","loadingAddTrack","album","image","newPlaylist","progress"],"mappings":"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","sourcesContent":["export const ADD_TO_PLAYLIST = 'app/playlistManager/ADD_TO_PLAYLIST'\r\nexport const TOGGLE_ADD_TRACK = 'app/playlistManager/TOGGLE_ADD_TRACK'\r\nexport const ADD_TRACK = 'app/playlistManager/ADD_TRACK'\r\nexport const REMOVE_TRACK = 'app/playlistManager/REMOVE_TRACK'\r\nexport const UPDATE_PLAYLIST_NAME = 'app/playlistManager/UPDATE_PLAYLIST_NAME'\r\nexport const IMPORT_PLAYLIST = 'app/playlistManager/IMPORT_PLAYLIST'\r\nexport const CONVERT_PLAYLIST_PROGRESS = 'app/playlistManager/CONVERT_PLAYLIST_PROGRESS'\r\nexport const RESET_PLAYLIST = 'app/playlistManager/RESET_PLAYLIST'\r\nexport const GET_SAVED_PLAYLIST = 'app/playlistManager/GET_SAVED_PLAYLIST'\r\nexport const SAVE_NEW_PLAYLIST = 'app/playlistManager/SAVE_NEW_PLAYLIST'\r\n\r\nfunction removeItemFromPlaylist(playlist, action) {\r\n    const {api, id} = action\r\n    switch (api) {\r\n        case 1:\r\n            return playlist.filter((tuple) => tuple.dataSpotify.id !== id)\r\n        case 2:\r\n            return playlist.filter((tuple) => tuple.dataDeezer.id !== id)\r\n        default:\r\n            return playlist\r\n    }\r\n}\r\n\r\nfunction addNewCorrelation(tuple, trackCorrelation) {\r\n    const newId = tuple.dataSpotify\r\n    const find = trackCorrelation.find((tuple) => tuple.dataSpotify === newId)\r\n\r\n    return find !== undefined\r\n        ? trackCorrelation\r\n        : [\r\n            ...trackCorrelation,\r\n            tuple,\r\n        ]\r\n}\r\n\r\nexport function getSavedPlaylist(savedPlaylist) {\r\n    return {\r\n        type: GET_SAVED_PLAYLIST,\r\n        savedPlaylist,\r\n    }\r\n}\r\n\r\nexport const addTrackToPlaylist = (input) => {\r\n    return {\r\n        type: ADD_TO_PLAYLIST,\r\n        api: input.api,\r\n        track: input.track,\r\n        trackCorrelation: input.trackCorrelation,\r\n    }\r\n}\r\n\r\nexport const addResultToPlaylist = (apis) => ({\r\n    type: ADD_TRACK,\r\n    apis,\r\n})\r\n\r\n\r\nexport const removeResultFromPlaylilst = (input) => ({\r\n    type: REMOVE_TRACK,\r\n    id: input.id,\r\n    api: input.api,\r\n\r\n})\r\n\r\nexport const getPlaylist = (api) => ({\r\n    type: IMPORT_PLAYLIST,\r\n    api,\r\n})\r\n\r\nexport const convertPlaylistProgress = (playlist) => ({\r\n    type: CONVERT_PLAYLIST_PROGRESS,\r\n    playlist,\r\n})\r\n\r\nexport const updatePlaylistName = (input) => ({\r\n    type: UPDATE_PLAYLIST_NAME,\r\n    input,\r\n})\r\n\r\nexport function resetPlaylist() {\r\n    return {\r\n        type: RESET_PLAYLIST,\r\n    }\r\n}\r\n\r\nexport function saveNewPlaylist(input) {\r\n    return {\r\n        type: SAVE_NEW_PLAYLIST,\r\n        input,\r\n    }\r\n}\r\n\r\nexport default function reducer(\r\n    state = {\r\n        loadingAddTracks: false,\r\n        playlists: [],\r\n        progressBar: 0,\r\n        playlistId: 0,\r\n        playlistName: '',\r\n        playlistImage: '',\r\n        trackCorrelation: [],\r\n    },\r\n    action,\r\n) {\r\n    switch (action.type) {\r\n        case ADD_TO_PLAYLIST:\r\n            return {\r\n                ...state,\r\n            }\r\n        case ADD_TRACK:\r\n            const newTrackCorrelation = addNewCorrelation({\r\n                    dataSpotify :  action.apis.spotify.id,\r\n                    dataDeezer : action.apis.deezer.id,\r\n                }, state.trackCorrelation)\r\n            return {\r\n                ...state,\r\n                playlists : [\r\n                    ...state.playlists,\r\n                    {\r\n                        dataSpotify :  action.apis.spotify,\r\n                        dataDeezer : action.apis.deezer,\r\n                    }\r\n                ],\r\n                trackCorrelation : newTrackCorrelation,\r\n                loadingAddTrack: false,\r\n                playlistImage: state.playlistImage === '' ? action.apis.spotify.album.image : state.playlistImage\r\n            }\r\n        case REMOVE_TRACK:\r\n            const newPlaylist = removeItemFromPlaylist(state.playlists, action)\r\n            return {\r\n                ...state,\r\n                playlists: newPlaylist,\r\n            }\r\n        case TOGGLE_ADD_TRACK:\r\n            return {\r\n                ...state,\r\n                loadingAddTrack: !state.loadingAddTrack,\r\n           }\r\n        case CONVERT_PLAYLIST_PROGRESS:\r\n            return {\r\n                ...state,\r\n                progressBar: action.playlist.progress,\r\n                playlists: action.playlist.playlist,\r\n                playlistId: action.playlist.id,\r\n                playlistName: action.playlist.playlistName,\r\n                playlistImage: action.playlist.image,\r\n            };\r\n        case UPDATE_PLAYLIST_NAME:\r\n            return {\r\n                ...state,\r\n                playlistName: action.input,\r\n            };\r\n        case RESET_PLAYLIST:\r\n            return {\r\n                ...state,\r\n                playlists: [],\r\n                progressBar: 0,\r\n                playlistId: 0,\r\n                playlistName: '',\r\n                playlistImage: '',\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports['default'] = routeReplacement;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _redux = require('redux');\n\nvar _reactRouter = require('react-router');\n\nvar _replaceRoutesMiddleware = require('./replaceRoutesMiddleware');\n\nvar _replaceRoutesMiddleware2 = _interopRequireDefault(_replaceRoutesMiddleware);\n\nfunction routeReplacement(next) {\n  return function (options) {\n    return function (createStore) {\n      return function (reducer, initialState) {\n        var baseRoutes = options.routes;\n        var getRoutes = options.getRoutes;\n        var routerStateSelector = options.routerStateSelector;\n        var store = undefined;\n        var childRoutes = [];\n        var areChildRoutesResolved = false;\n        var childRoutesCallbacks = [];\n\n        function replaceRoutes(r, isInit) {\n          childRoutes = _reactRouter.createRoutes(r);\n          var routerState = routerStateSelector(store.getState());\n\n          if (routerState && !isInit) {\n            var _routerState$location = routerState.location;\n            var state = _routerState$location.state;\n            var pathname = _routerState$location.pathname;\n            var query = _routerState$location.query;\n            store.history.replace({\n              state: state,\n              pathname: pathname,\n              query: query\n            });\n          }\n\n          if (!areChildRoutesResolved) {\n            areChildRoutesResolved = true;\n            childRoutesCallbacks.forEach(function (cb) {\n              return cb(null, childRoutes);\n            });\n          }\n        }\n\n        var routes = undefined;\n\n        if (baseRoutes) {\n          routes = baseRoutes;\n        } else if (getRoutes) {\n          routes = getRoutes({\n            dispatch: function dispatch(action) {\n              return store.dispatch(action);\n            },\n            getState: function getState() {\n              return store.getState();\n            }\n          });\n        } else {\n          routes = [{\n            getChildRoutes: function getChildRoutes(location, cb) {\n              if (!areChildRoutesResolved) {\n                childRoutesCallbacks.push(cb);\n                return;\n              }\n\n              cb(null, childRoutes);\n            }\n          }];\n        }\n\n        store = _redux.compose(_redux.applyMiddleware(_replaceRoutesMiddleware2['default'](replaceRoutes)), next(_extends({}, options, {\n          routes: _reactRouter.createRoutes(routes)\n        })))(createStore)(reducer, initialState);\n        return store;\n      };\n    };\n  };\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}
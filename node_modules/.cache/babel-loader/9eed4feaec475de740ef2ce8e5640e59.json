{"ast":null,"code":"import axios from \"axios\";\nimport { formatSpotifyTrack } from \"../util/utils\";\nexport function formatData(data) {\n  try {\n    return data.data.tracks.items.map(item => formatSpotifyTrack(item));\n  } catch (e) {\n    return [];\n  }\n}\n\nclass SpotifyService {\n  async searchTrackFromCompleteRequestInBean(requestInBean) {\n    const title = requestInBean.title,\n          album = requestInBean.album,\n          artist = requestInBean.artist;\n    let res = await axios.get(\"/api/spotify/search/advanced?artist=\".concat(artist.name, \"&title=\").concat(title, \"&album=\").concat(album.name, \"&type=track\"), {}).catch(function (error) {\n      console.error(error);\n    });\n\n    if (res === null) {\n      res = await axios.get(\"/api/spotify/search/advanced?artist=\".concat(artist.name, \"&title=\").concat(title, \"&type=track\"), {}).catch(function (error) {\n        console.error(error);\n      });\n    }\n\n    const data = formatData(res);\n    return data.length === 0 ? false : data[0];\n  }\n\n  async searchTrackBasic(searchValue) {\n    const res = await axios.get(\"/api/spotify/search?q=\".concat(searchValue, \"&type=track\"), {}).catch(function (error) {\n      console.error(error);\n    });\n    return formatData(res);\n  }\n\n  async getPlaylistFull(url) {\n    const res = await axios.get(\"\".concat(url), {}).catch(function (error) {\n      console.error(error);\n    });\n    const items = res.data.tracks.items.map(item => formatSpotifyTrack(item.track));\n    return {\n      items,\n      total: res.data.tracks.total,\n      playlistName: res.data.name\n    };\n  }\n\n  async getPlaylistTracks(search) {\n    let url = search.url,\n        limit = search.limit,\n        offset = search.offset;\n    const playlistFull = await axios.get(\"\".concat(url), {}).catch(function (error) {\n      console.error(error);\n    });\n    const res = await axios.get(\"\".concat(url, \"/tracks?limit=\").concat(limit, \"&offset=\").concat(offset), {}).catch(function (error) {\n      console.error(error);\n    });\n    const items = res.data.items.map(item => formatSpotifyTrack(item.track));\n    return {\n      items,\n      total: res.data.total,\n      playlistName: playlistFull.name\n    };\n  }\n\n  async getTrackFromId(id) {\n    const _ref = await axios.get(\"/api/spotify/get/tracks/\".concat(id), {}).catch(function (error) {\n      console.error(error);\n    }),\n          data = _ref.data;\n\n    return formatSpotifyTrack(data);\n  }\n\n}\n\nexport default SpotifyService;","map":{"version":3,"sources":["C:/Travail/2-Cours/M2/node/swaap/swaap/frontend/src/services/SpotifyService.js"],"names":["axios","formatSpotifyTrack","formatData","data","tracks","items","map","item","e","SpotifyService","searchTrackFromCompleteRequestInBean","requestInBean","title","album","artist","res","get","name","catch","error","console","length","searchTrackBasic","searchValue","getPlaylistFull","url","track","total","playlistName","getPlaylistTracks","search","limit","offset","playlistFull","getTrackFromId","id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {formatSpotifyTrack} from \"../util/utils\";\r\n\r\nexport function formatData(data) {\r\n    try {\r\n        return data.data.tracks.items.map((item) => formatSpotifyTrack(item))\r\n    } catch (e) {\r\n        return []\r\n    }\r\n}\r\n\r\nclass SpotifyService {\r\n\r\n    async searchTrackFromCompleteRequestInBean(requestInBean) {\r\n        const {title, album, artist} = requestInBean\r\n\r\n        let res = await axios.get(`/api/spotify/search/advanced?artist=${artist.name}&title=${title}&album=${album.name}&type=track`, {})\r\n            .catch(function (error) {\r\n                console.error(error)\r\n            })\r\n        if(res === null){\r\n            res = await axios.get(`/api/spotify/search/advanced?artist=${artist.name}&title=${title}&type=track`, {})\r\n                .catch(function (error) {\r\n                    console.error(error)\r\n                })\r\n        }\r\n\r\n        const data = formatData(res)\r\n        return data.length === 0 ? false : data[0]\r\n\r\n    }\r\n\r\n    async searchTrackBasic(searchValue) {\r\n        const res = await axios.get(`/api/spotify/search?q=${searchValue}&type=track`, {}).catch(function (error) {\r\n            console.error(error);\r\n        });\r\n\r\n        return formatData(res)\r\n    }\r\n\r\n    async getPlaylistFull(url) {\r\n        const res = await axios.get(`${url}`, {}).catch(function (error) {\r\n            console.error(error);\r\n        });\r\n\r\n        const items = res.data.tracks.items.map((item) => formatSpotifyTrack(item.track))\r\n\r\n        return {\r\n            items,\r\n            total: res.data.tracks.total,\r\n            playlistName: res.data.name,\r\n        }\r\n    }\r\n\r\n    async getPlaylistTracks(search) {\r\n        let {url, limit, offset} = search\r\n\r\n        const playlistFull = await axios.get(`${url}`, {}).catch(function (error) {\r\n            console.error(error);\r\n        });\r\n\r\n        const res = await axios.get(`${url}/tracks?limit=${limit}&offset=${offset}`, {}).catch(function (error) {\r\n            console.error(error);\r\n        });\r\n\r\n        const items = res.data.items.map((item) => formatSpotifyTrack(item.track))\r\n\r\n        return {\r\n            items,\r\n            total: res.data.total,\r\n            playlistName: playlistFull.name,\r\n        }\r\n    }\r\n\r\n    async getTrackFromId(id) {\r\n        const {data} = await axios.get(`/api/spotify/get/tracks/${id}`, {}).catch(function (error) {\r\n            console.error(error);\r\n        });\r\n\r\n        return formatSpotifyTrack(data)\r\n    }\r\n\r\n}\r\n\r\nexport default SpotifyService"]},"metadata":{},"sourceType":"module"}
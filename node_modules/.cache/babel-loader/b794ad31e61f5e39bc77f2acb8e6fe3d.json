{"ast":null,"code":"import { put, takeEvery } from 'redux-saga/effects';\nimport RequestInBean from \"../modeles/RequestInBean\";\nimport DeezerService from \"../services/DeezerService\";\nimport SpotifyService from \"../services/SpotifyService\";\nimport { ADD_TO_PLAYLIST, IMPORT_PLAYLIST, addResultToPlaylist, convertPlaylistProgress, GET_SAVED_PLAYLIST, SAVE_NEW_PLAYLIST } from \"../modules/playlistManager\";\nimport PlaylistService from \"../services/PlaylistService\";\n\nasync function getPlaylistTracksFromApi(input, spotifyService, deezerService) {\n  switch (input.api) {\n    case 1:\n      return spotifyService.getPlaylistTracks({\n        url: \"/api/spotify/get/playlists/\".concat(input.id),\n        limit: 100,\n        offset: input.length\n      });\n\n    case 2:\n      return deezerService.getPlaylistTracks({\n        url: \"/api/deezer/get/playlists/\".concat(input.id),\n        limit: 100,\n        offset: input.length\n      });\n\n    default:\n      return null;\n  }\n}\n\nasync function getPlaylistFullFromApi(input, spotifyService, deezerService) {\n  switch (input.api) {\n    case 1:\n      return spotifyService.getPlaylistFull(\"/api/spotify/get/playlists/\".concat(input.id));\n\n    case 2:\n      return deezerService.getPlaylistFull(\"/api/deezer/get/playlist/\".concat(input.id));\n\n    default:\n      return null;\n  }\n}\n\nfunction* importSavedPlaylistFromId(input) {\n  const _input$savedPlaylist = input.savedPlaylist,\n        tracks = _input$savedPlaylist.tracks,\n        id = _input$savedPlaylist.id,\n        playlistName = _input$savedPlaylist.playlistName,\n        image = _input$savedPlaylist.image;\n  const total = tracks.length;\n  const spotifyService = new SpotifyService();\n  const deezerService = new DeezerService();\n  let playlist = [];\n\n  for (let index in tracks) {\n    let track = tracks[index];\n    const dataSpotify = yield spotifyService.getTrackFromId(track.spotify);\n    const dataDeezer = yield deezerService.getTrackFromId(track.deezer);\n    playlist = [...playlist, {\n      dataDeezer,\n      dataSpotify\n    }];\n    yield put(convertPlaylistProgress({\n      playlist,\n      progress: tracks.length / total * 100,\n      id,\n      playlistName,\n      image\n    }));\n  }\n\n  yield put(convertPlaylistProgress({\n    playlist,\n    progress: 100,\n    id,\n    playlistName,\n    image\n  }));\n}\n\nfunction* saveNewPlaylist(input) {\n  const _input$input = input.input,\n        playlist = _input$input.playlist,\n        userId = _input$input.userId;\n  const playlistService = new PlaylistService();\n\n  const _playlistService$crea = playlistService.createPlaylist(playlist),\n        data = _playlistService$crea.data;\n\n  console.log('data');\n  console.log(data);\n}\n\nfunction* addTrackToPlaylist(input) {\n  const track = input.track,\n        api = input.api,\n        trackCorrelation = input.trackCorrelation;\n  const artists = track.artists;\n  const title = track.name;\n  const album = track.album.name;\n  const requestInBean = new RequestInBean(title, album, artists);\n  let tracksFromApis, tuple;\n\n  switch (api) {\n    case 1:\n      tuple = trackCorrelation.filter(tuple => tuple.dataSpotify === track.id);\n      let deezer;\n\n      if (tuple.length > 0) {\n        deezer = yield new DeezerService().getTrackFromId(tuple[0].dataDeezer);\n      } else {\n        deezer = yield new DeezerService().searchTrackFromCompleteRequestInBean(requestInBean);\n      }\n\n      if (deezer === false) {\n        tracksFromApis = {}; //TODO : manage missing Track from Deezer\n      } else {\n        tracksFromApis = {\n          spotify: track,\n          deezer\n        };\n      }\n\n      break;\n\n    case 2:\n      tuple = trackCorrelation.filter(tuple => tuple.dataDeezer === track.id);\n      let spotify;\n\n      if (tuple.length > 0) {\n        spotify = yield new SpotifyService().getTrackFromId(tuple[0].dataDeezer);\n      } else {\n        spotify = yield new SpotifyService().searchTrackFromCompleteRequestInBean(requestInBean);\n      }\n\n      if (spotify === false) {\n        tracksFromApis = {}; //TODO : manage missing Track from Spotify\n      } else {\n        tracksFromApis = {\n          spotify,\n          deezer: track\n        };\n      }\n\n      break;\n\n    default:\n      tracksFromApis = {\n        spotify: {},\n        deezer: {}\n      };\n  }\n\n  yield put(addResultToPlaylist(tracksFromApis));\n}\n\nfunction* importPlaylistFromId(input) {\n  const _input$api = input.api,\n        api = _input$api.api,\n        id = _input$api.id,\n        image = _input$api.image;\n  const spotifyService = new SpotifyService();\n  const deezerService = new DeezerService();\n  let res = {\n    items: [],\n    total: 1\n  };\n  let requestInBean;\n  let playlist = [];\n  const playlistFull = yield getPlaylistFullFromApi({\n    api,\n    id\n  }, spotifyService, deezerService);\n  let tracks = playlistFull.items;\n  const total = playlistFull.total,\n        playlistName = playlistFull.playlistName;\n\n  while (tracks.length < total) {\n    res = yield getPlaylistTracksFromApi({\n      api,\n      length: tracks.length,\n      id\n    }, spotifyService, deezerService);\n    tracks = [...tracks, ...res.items];\n  }\n\n  switch (api) {\n    case 1:\n      for (const index in tracks) {\n        const track = tracks[index];\n        requestInBean = new RequestInBean(track.name, track.album, track.artists);\n        const dataDeezer = yield new DeezerService().searchTrackFromCompleteRequestInBean(requestInBean);\n\n        if (dataDeezer) {\n          playlist = [...playlist, {\n            dataDeezer,\n            dataSpotify: track\n          }];\n          yield put(convertPlaylistProgress({\n            playlist,\n            progress: playlist.length / total * 100,\n            id,\n            playlistName,\n            image\n          }));\n        }\n      }\n\n      break;\n\n    case 2:\n      for (const index in tracks) {\n        const track = tracks[index];\n        requestInBean = new RequestInBean(track.name, track.album, track.artists);\n        const dataSpotify = yield new SpotifyService().searchTrackFromCompleteRequestInBean(requestInBean);\n\n        if (dataSpotify) {\n          playlist = [...playlist, {\n            dataSpotify,\n            dataDeezer: track\n          }];\n          yield put(convertPlaylistProgress({\n            playlist,\n            progress: playlist.length / total * 100,\n            id,\n            playlistName,\n            image\n          }));\n        }\n      }\n\n      break;\n\n    default:\n      //manage error\n      break;\n  }\n\n  yield put(convertPlaylistProgress({\n    playlist,\n    progress: 100,\n    id,\n    playlistName,\n    image\n  }));\n}\n\nexport default function* manageAddPlaylist() {\n  yield takeEvery(ADD_TO_PLAYLIST, addTrackToPlaylist);\n  yield takeEvery(IMPORT_PLAYLIST, importPlaylistFromId);\n  yield takeEvery(GET_SAVED_PLAYLIST, importSavedPlaylistFromId);\n  yield takeEvery(SAVE_NEW_PLAYLIST, saveNewPlaylist);\n}","map":{"version":3,"sources":["C:/Travail/2-Cours/M2/node/swaap/swaap/frontend/src/sagas/playlistManager.js"],"names":["put","takeEvery","RequestInBean","DeezerService","SpotifyService","ADD_TO_PLAYLIST","IMPORT_PLAYLIST","addResultToPlaylist","convertPlaylistProgress","GET_SAVED_PLAYLIST","SAVE_NEW_PLAYLIST","PlaylistService","getPlaylistTracksFromApi","input","spotifyService","deezerService","api","getPlaylistTracks","url","id","limit","offset","length","getPlaylistFullFromApi","getPlaylistFull","importSavedPlaylistFromId","savedPlaylist","tracks","playlistName","image","total","playlist","index","track","dataSpotify","getTrackFromId","spotify","dataDeezer","deezer","progress","saveNewPlaylist","userId","playlistService","createPlaylist","data","console","log","addTrackToPlaylist","trackCorrelation","artists","title","name","album","requestInBean","tracksFromApis","tuple","filter","searchTrackFromCompleteRequestInBean","importPlaylistFromId","res","items","playlistFull","manageAddPlaylist"],"mappings":"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","sourcesContent":["import {put, takeEvery} from 'redux-saga/effects'\r\nimport RequestInBean from \"../modeles/RequestInBean\";\r\nimport DeezerService from \"../services/DeezerService\";\r\nimport SpotifyService from \"../services/SpotifyService\";\r\nimport {\r\n    ADD_TO_PLAYLIST,\r\n    IMPORT_PLAYLIST,\r\n    addResultToPlaylist,\r\n    convertPlaylistProgress, GET_SAVED_PLAYLIST, SAVE_NEW_PLAYLIST\r\n} from \"../modules/playlistManager\";\r\nimport PlaylistService from \"../services/PlaylistService\";\r\n\r\nasync function getPlaylistTracksFromApi(input, spotifyService, deezerService) {\r\n    switch (input.api) {\r\n        case 1:\r\n            return spotifyService.getPlaylistTracks({\r\n                url: `/api/spotify/get/playlists/${input.id}`,\r\n                limit: 100,\r\n                offset: input.length,\r\n            })\r\n        case 2:\r\n            return deezerService.getPlaylistTracks({\r\n                url: `/api/deezer/get/playlists/${input.id}`,\r\n                limit: 100,\r\n                offset: input.length,\r\n            })\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nasync function getPlaylistFullFromApi(input, spotifyService, deezerService) {\r\n    switch (input.api) {\r\n        case 1:\r\n            return spotifyService.getPlaylistFull(`/api/spotify/get/playlists/${input.id}`)\r\n        case 2:\r\n            return deezerService.getPlaylistFull(`/api/deezer/get/playlist/${input.id}`)\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nfunction* importSavedPlaylistFromId(input) {\r\n    const {tracks, id, playlistName, image} = input.savedPlaylist\r\n    const total = tracks.length\r\n    const spotifyService = new SpotifyService()\r\n    const deezerService = new DeezerService()\r\n\r\n    let playlist = []\r\n\r\n    for(let index in tracks) {\r\n        let track = tracks[index]\r\n        const dataSpotify = yield spotifyService.getTrackFromId(track.spotify)\r\n        const dataDeezer = yield deezerService.getTrackFromId(track.deezer)\r\n\r\n        playlist = [\r\n            ...playlist,\r\n            {\r\n                dataDeezer,\r\n                dataSpotify,\r\n            }\r\n        ]\r\n\r\n        yield put(convertPlaylistProgress({\r\n            playlist,\r\n            progress: (tracks.length / total) * 100,\r\n            id,\r\n            playlistName,\r\n            image,\r\n        }))\r\n    }\r\n\r\n    yield put(convertPlaylistProgress({\r\n        playlist,\r\n        progress: 100,\r\n        id,\r\n        playlistName,\r\n        image,\r\n    }))\r\n\r\n}\r\n\r\nfunction* saveNewPlaylist(input) {\r\n    const {playlist, userId} = input.input\r\n\r\n    const playlistService = new PlaylistService()\r\n    const {data} = playlistService.createPlaylist(playlist)\r\n    console.log('data')\r\n    console.log(data)\r\n}\r\n\r\nfunction* addTrackToPlaylist(input) {\r\n    const {track, api, trackCorrelation} = input\r\n    const artists = track.artists\r\n    const title = track.name\r\n    const album = track.album.name\r\n\r\n    const requestInBean = new RequestInBean(title, album, artists)\r\n    let tracksFromApis, tuple\r\n\r\n    switch(api) {\r\n        case 1:\r\n            tuple = trackCorrelation.filter((tuple) => tuple.dataSpotify === track.id)\r\n            let deezer\r\n            if(tuple.length > 0) {\r\n                deezer = yield new DeezerService().getTrackFromId(tuple[0].dataDeezer)\r\n            } else {\r\n                deezer = yield new DeezerService().searchTrackFromCompleteRequestInBean(requestInBean)\r\n            }\r\n\r\n            if(deezer === false) {\r\n                tracksFromApis = {}\r\n                //TODO : manage missing Track from Deezer\r\n            } else{\r\n                tracksFromApis = {\r\n                    spotify: track,\r\n                    deezer,\r\n                }\r\n            }\r\n\r\n            break;\r\n        case 2:\r\n            tuple = trackCorrelation.filter((tuple) => tuple.dataDeezer === track.id)\r\n            let spotify\r\n            if(tuple.length > 0) {\r\n                spotify = yield new SpotifyService().getTrackFromId(tuple[0].dataDeezer)\r\n            } else {\r\n                spotify = yield new SpotifyService().searchTrackFromCompleteRequestInBean(requestInBean)\r\n            }\r\n\r\n            if(spotify === false) {\r\n                tracksFromApis = {}\r\n                //TODO : manage missing Track from Spotify\r\n            } else {\r\n                tracksFromApis = {\r\n                    spotify,\r\n                    deezer: track,\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            tracksFromApis = {\r\n                spotify: {},\r\n                deezer: {},\r\n            }\r\n    }\r\n    yield put(addResultToPlaylist(tracksFromApis))\r\n}\r\n\r\nfunction* importPlaylistFromId(input) {\r\n    const {api, id, image} = input.api\r\n    const spotifyService = new SpotifyService()\r\n    const deezerService = new DeezerService()\r\n\r\n    let res = {\r\n        items: [],\r\n        total: 1,\r\n    }\r\n    let requestInBean\r\n\r\n    let playlist = []\r\n\r\n    const playlistFull = yield getPlaylistFullFromApi({\r\n        api,\r\n        id,\r\n    }, spotifyService, deezerService)\r\n\r\n    let tracks = playlistFull.items\r\n    const {total, playlistName} = playlistFull\r\n\r\n\r\n    while(tracks.length < total){\r\n        res = yield getPlaylistTracksFromApi({\r\n            api,\r\n            length: tracks.length,\r\n            id,\r\n        }, spotifyService, deezerService)\r\n        tracks = [\r\n            ...tracks,\r\n            ...res.items,\r\n        ]\r\n    }\r\n\r\n    switch (api){\r\n        case 1 :\r\n            for(const index in tracks) {\r\n                const track = tracks[index]\r\n\r\n                requestInBean = new RequestInBean(track.name, track.album, track.artists)\r\n                const dataDeezer = yield new DeezerService().searchTrackFromCompleteRequestInBean(requestInBean)\r\n                if(dataDeezer) {\r\n                    playlist = [\r\n                        ...playlist,\r\n                        {\r\n                            dataDeezer,\r\n                            dataSpotify: track,\r\n                        }\r\n                    ]\r\n                    yield put(convertPlaylistProgress({\r\n                        playlist,\r\n                        progress: (playlist.length / total) * 100,\r\n                        id,\r\n                        playlistName,\r\n                        image,\r\n                    }))\r\n                }\r\n            }\r\n            break;\r\n        case 2 :\r\n            for(const index in tracks) {\r\n                const track = tracks[index]\r\n\r\n                requestInBean = new RequestInBean(track.name, track.album, track.artists)\r\n                const dataSpotify = yield new SpotifyService().searchTrackFromCompleteRequestInBean(requestInBean)\r\n                if(dataSpotify) {\r\n                    playlist = [\r\n                        ...playlist,\r\n                        {\r\n                            dataSpotify,\r\n                            dataDeezer: track,\r\n                        }\r\n                    ]\r\n                    yield put(convertPlaylistProgress({\r\n                        playlist,\r\n                        progress: (playlist.length / total) * 100,\r\n                        id,\r\n                        playlistName,\r\n                        image,\r\n                    }))\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            //manage error\r\n            break;\r\n    }\r\n    yield put(convertPlaylistProgress({\r\n        playlist,\r\n        progress: 100,\r\n        id,\r\n        playlistName,\r\n        image,\r\n    }))\r\n}\r\n\r\nexport default function* manageAddPlaylist() {\r\n    yield takeEvery(ADD_TO_PLAYLIST, addTrackToPlaylist)\r\n    yield takeEvery(IMPORT_PLAYLIST, importPlaylistFromId)\r\n    yield takeEvery(GET_SAVED_PLAYLIST, importSavedPlaylistFromId)\r\n    yield takeEvery(SAVE_NEW_PLAYLIST, saveNewPlaylist)\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { put, delay, takeLatest } from 'redux-saga/effects';\nimport { displayTracks, SEARCH_REQUEST } from \"../modules/search\";\nimport DeezerService from \"../services/DeezerService\";\nimport SpotifyService from \"../services/SpotifyService\";\n\nfunction* requestSearchTrack(search) {\n  yield delay(200);\n  let searchValue = search.search;\n\n  if (searchValue !== '') {\n    const dataSpotify = yield new SpotifyService().searchTrackBasic(searchValue);\n    const dataDeezer = yield new DeezerService().searchTrackBasic(searchValue);\n    const tracks = {\n      dataDeezer,\n      dataSpotify\n    };\n    yield put(displayTracks(tracks));\n  }\n}\n\nexport default function* searchTrackSaga() {\n  yield takeLatest(SEARCH_REQUEST, requestSearchTrack);\n}","map":{"version":3,"sources":["C:/Travail/2-Cours/M2/Projet_Transvers/swaap-music-front/src/sagas/search.js"],"names":["put","delay","takeLatest","displayTracks","SEARCH_REQUEST","DeezerService","SpotifyService","requestSearchTrack","search","searchValue","dataSpotify","searchTrackBasic","dataDeezer","tracks","searchTrackSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,UAApB,QAAqC,oBAArC;AACA,SAAQC,aAAR,EAAuBC,cAAvB,QAA4C,mBAA5C;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAEA,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AACjC,QAAMP,KAAK,CAAC,GAAD,CAAX;AACA,MAAIQ,WAAW,GAAGD,MAAM,CAACA,MAAzB;;AACA,MAAIC,WAAW,KAAK,EAApB,EAAwB;AACpB,UAAMC,WAAW,GAAG,MAAM,IAAIJ,cAAJ,GAAqBK,gBAArB,CAAsCF,WAAtC,CAA1B;AACA,UAAMG,UAAU,GAAG,MAAM,IAAIP,aAAJ,GAAoBM,gBAApB,CAAqCF,WAArC,CAAzB;AAEA,UAAMI,MAAM,GAAG;AACXD,MAAAA,UADW;AAEXF,MAAAA;AAFW,KAAf;AAIA,UAAMV,GAAG,CAACG,aAAa,CAACU,MAAD,CAAd,CAAT;AACH;AACJ;;AAED,eAAe,UAAUC,eAAV,GAA4B;AACvC,QAAMZ,UAAU,CAACE,cAAD,EAAiBG,kBAAjB,CAAhB;AACH","sourcesContent":["import {put, delay, takeLatest} from 'redux-saga/effects'\r\nimport {displayTracks, SEARCH_REQUEST} from \"../modules/search\";\r\nimport DeezerService from \"../services/DeezerService\";\r\nimport SpotifyService from \"../services/SpotifyService\";\r\n\r\nfunction* requestSearchTrack(search) {\r\n    yield delay(200)\r\n    let searchValue = search.search\r\n    if (searchValue !== '') {\r\n        const dataSpotify = yield new SpotifyService().searchTrackBasic(searchValue)\r\n        const dataDeezer = yield new DeezerService().searchTrackBasic(searchValue)\r\n\r\n        const tracks = {\r\n            dataDeezer,\r\n            dataSpotify,\r\n        }\r\n        yield put(displayTracks(tracks))\r\n    }\r\n}\r\n\r\nexport default function* searchTrackSaga() {\r\n    yield takeLatest(SEARCH_REQUEST, requestSearchTrack);\r\n}"]},"metadata":{},"sourceType":"module"}